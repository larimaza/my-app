{"version":3,"sources":["state/state.js","state/reducer.js","state/index.js","state/types.js","container.js","state/actions.js","components/WeatherController.js","App.js","components/GameView.js","serviceWorker.js","index.js"],"names":["isMatchLit","matchCount","weather","createStore","state","initialState","action","type","payload","matchboxLimit","newMatchCount","gameViewContainer","connect","getMatches","setMatch","weatherControllerContainer","changeWeather","WeatherController","onClick","SmartGameView","className","SmartWeatherController","App","store","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAAe,GACbA,YAAY,EACZC,WAAY,GACZC,QAAS,S,ikBCAI,ICCAC,eDDA,WAAmC,IAAlCC,EAAiC,uDAAzBC,EAAcC,EAAW,uCAC/C,OAAQA,EAAOC,MACb,IELqB,YFMnB,OAAKD,EAAOE,QAOU,SAAlBJ,EAAMF,SAAsBI,EAAOE,QAC9B,EAAP,GACKJ,EADL,CAEEJ,YAAY,EACZC,WAAY,IAIZG,EAAMH,WAAa,IAAMG,EAAMJ,WAC1B,EAAP,GACKI,EADL,CAEEJ,WAAYM,EAAOE,QACnBP,WAAYG,EAAMH,WAAa,IAI5BG,EAtBE,EAAP,GACKA,EADL,CAEEJ,YAAY,IAuBlB,IE/BuB,cFgCrB,IAAMS,EAAgB,GAChBC,EAAgBN,EAAMH,WAAaK,EAAOE,QAEhD,MAAsB,SAAlBJ,EAAMF,SAAwC,SAAlBE,EAAMF,QAC7B,EAAP,GACKE,EADL,CAEEH,WAAY,IAKP,EAAP,GACKG,EAFHM,EAAgBD,EAClB,CAEER,WAAY,IAIhB,CAEEA,WAAYS,IAIhB,IEtD0B,iBFuDxB,MAAuB,SAAnBJ,EAAOE,QACF,EAAP,GACKJ,EADL,CAEEJ,YAAY,EACZC,WAAY,EACZC,QAASI,EAAOE,UAIG,SAAnBF,EAAOE,QACF,EAAP,GACKJ,EADL,CAEEJ,YAAY,EACZE,QAASI,EAAOE,UAIb,EAAP,GACKJ,EADL,CAEEF,QAASI,EAAOE,UAIpB,QACE,OAAOJ,KC7EuBC,GEDvBM,EAAoBC,aAC/B,SAAAR,GAAK,MAAK,CAAEH,WAAYG,EAAMH,WAAYD,WAAYI,EAAMJ,cAC5D,CAAEa,WCEsB,SAACL,GAAD,MAAc,CACtCD,KFPyB,cEQzBC,YDJcM,SCHQ,SAACN,GAAD,MAAc,CACpCD,KFHuB,YEIvBC,cDIWO,EAA6BH,aACxC,SAAAR,GAAK,MAAK,CAAEF,QAASE,EAAMF,WAC3B,CAAEc,cCEyB,SAACR,GAAD,MAAc,CACzCD,KFX4B,iBEY5BC,cCFaS,EAVW,SAAC,GAAD,IAAGf,EAAH,EAAGA,QAASc,EAAZ,EAAYA,cAAZ,OACxB,oCACE,iDAAuBd,EAAvB,KACA,4BAAQgB,QAAS,kBAAMF,EAAc,WAArC,iBACA,4BAAQE,QAAS,kBAAMF,EAAc,YAArC,kBACA,4BAAQE,QAAS,kBAAMF,EAAc,UAArC,gBACA,4BAAQE,QAAS,kBAAMF,EAAc,UAArC,kBCAEG,EAAgBR,GCNL,SAAC,GAAD,IAAGV,EAAH,EAAGA,WAAYY,EAAf,EAAeA,WAAYb,EAA3B,EAA2BA,WAAYc,EAAvC,EAAuCA,SAAvC,OACf,yBAAKM,UAAU,OACb,4CAAkBpB,EAAa,MAAQ,UAAvC,KACA,uCAAaC,EAAb,aACA,4BAAQiB,QAAS,kBAAML,EAAW,KAAlC,eACCb,EACC,4BAAQkB,QAAS,kBAAMJ,GAAS,KAAhC,iBAEA,4BAAQI,QAAS,kBAAMJ,GAAS,KAAhC,uBDDAO,EAAyBN,EAA2BE,GAS3CK,EAPH,kBACV,kBAAC,IAAD,CAAUC,MAAOnB,GACf,kBAACe,EAAD,MACA,kBAACE,EAAD,QEFgBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8f4ec8a0.chunk.js","sourcesContent":["export default {\n  isMatchLit: false,\n  matchCount: 12,\n  weather: \"Clear\" // Clear, Cloudy, Rain, Snow\n}","import { SET_MATCH, GET_MATCHES, CHANGE_WEATHER } from \"./types\";\nimport initialState from \"./state\";\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_MATCH: {\n      if (!action.payload) {\n        return {\n          ...state,\n          isMatchLit: false\n        };\n      }\n\n      if (state.weather === \"Rain\" && action.payload) {\n        return {\n          ...state,\n          isMatchLit: false,\n          matchCount: 0\n        }\n      }\n\n      if (state.matchCount > 0 && !state.isMatchLit) {\n        return {\n          ...state,\n          isMatchLit: action.payload,\n          matchCount: state.matchCount - 1\n        };\n      }\n\n      return state;\n    }\n\n    case GET_MATCHES: {\n      const matchboxLimit = 20;\n      const newMatchCount = state.matchCount + action.payload;\n\n      if (state.weather === \"Rain\" || state.weather === \"Snow\") {\n        return {\n          ...state,\n          matchCount: 0\n        }\n      }\n\n      if (newMatchCount > matchboxLimit) {\n        return {\n          ...state,\n          matchCount: 20\n        }\n      }\n\n      return {\n        ...state,\n        matchCount: newMatchCount\n      }\n    }\n\n    case CHANGE_WEATHER: {\n      if (action.payload === \"Snow\") {\n        return {\n          ...state,\n          isMatchLit: false,\n          matchCount: 0,\n          weather: action.payload\n        }\n      }\n\n      if (action.payload === \"Rain\") {\n        return {\n          ...state,\n          isMatchLit: false,\n          weather: action.payload\n        }\n      } \n\n      return {\n        ...state,\n        weather: action.payload\n      }\n    }\n\n    default:\n      return state;\n  }\n};\n","import {createStore} from 'redux';\nimport initialState from './state';\nimport reducer from './reducer';\n\nexport default createStore(reducer, initialState);\n","export const SET_MATCH = 'SET_MATCH';\nexport const GET_MATCHES = 'GET_MATCHES';\nexport const CHANGE_WEATHER = 'CHANGE_WEATHER';","import { connect } from \"react-redux\";\nimport { getMatches, setMatch, changeWeather } from \"./state/actions\";\n\nexport const gameViewContainer = connect(\n  state => ({ matchCount: state.matchCount, isMatchLit: state.isMatchLit }),\n  { getMatches, setMatch }\n);\n\nexport const weatherControllerContainer = connect(\n  state => ({ weather: state.weather }),\n  { changeWeather }\n);\n","import {SET_MATCH, GET_MATCHES, CHANGE_WEATHER} from './types';\n\nexport const setMatch = (payload) => ({\n  type: SET_MATCH,\n  payload\n});\n\nexport const getMatches = (payload) => ({\n  type: GET_MATCHES,\n  payload\n})\n\nexport const changeWeather = (payload) => ({\n  type: CHANGE_WEATHER,\n  payload\n})","import React from \"react\";\n\nconst WeatherController = ({ weather, changeWeather }) => (\n  <>\n    <p>Current weather is {weather}.</p>\n    <button onClick={() => changeWeather(\"Clear\")}>Make it clear</button>\n    <button onClick={() => changeWeather(\"Cloudy\")}>Make it cloudy</button>\n    <button onClick={() => changeWeather(\"Rain\")}>Make it rain</button>\n    <button onClick={() => changeWeather(\"Snow\")}>Make it snow</button>\n  </>\n);\n\nexport default WeatherController;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport \"./App.css\";\nimport state from \"./state\";\nimport { gameViewContainer, weatherControllerContainer } from \"./container\";\nimport GameView from \"./components/GameView\";\nimport WeatherController from \"./components/WeatherController\";\n\nconst SmartGameView = gameViewContainer(GameView);\nconst SmartWeatherController = weatherControllerContainer(WeatherController);\n\nconst App = () => (\n  <Provider store={state}>\n    <SmartGameView />\n    <SmartWeatherController />\n  </Provider>\n);\n\nexport default App;\n","import React from \"react\";\n\nconst GameView = ({ matchCount, getMatches, isMatchLit, setMatch }) => (\n  <div className=\"App\">\n    <p>Your match is {isMatchLit ? \"lit\" : \"not lit\"}.</p>\n    <p>You have {matchCount} matches.</p>\n    <button onClick={() => getMatches(5)}>Get matches</button>\n    {isMatchLit ? (\n      <button onClick={() => setMatch(false)}>Put out match</button>\n    ) : (\n      <button onClick={() => setMatch(true)}>Light one match</button>\n    )}\n  </div>\n);\n\nexport default GameView;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}